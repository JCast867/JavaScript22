Writing Quality Code

Code debugging is an essential part for coding. Bugs will happen every time you code. Some of the reasons why these bugs happen will be for syntax errors or logical error. Looking for and fixing these errors is called code debugging. For JavaScript, all modern browsers have built JavaScript debuggers. One of the most common ways in JavaScript is to use "console.log()". It's used by the majority since it's almost like a print statement. Another way is to set breakpoints which stop executing the code and it lets you examine the values and then you could continue the execution. Additionally, the keyword "debugger" stops the execution and calls the debugging function. It has the same function as setting a breakpoint in the debugger.
There are also JavaScript coding conventions that JavaScript code should follow. Coding conventions are style guidelines for programming. These coding conventions just make it easier to read code and make code maintenance easier. With variable names, they should always start with a letter and camelCase for indentifier names, i.e. "firstName", and "lastName". Spaces around operators (+ = - * /) and commas should also be used, i.e., "let fullName = firstName + lastName;". Code should be indentation. Two spaces are typically used but some people prefer to use tabs (I use tabs). For statement rules, always end a simple statement with a semicolon. For complex statements, put the open bracket at the end of the first line, use one space before the opening bracket, put the closing bracket on a new line without leading spaces, and do not end a complex statement with a semicolon. For object rules, to define object you should place the opening bracket on the same line as the object, name, use colon plus one space between each property and its value, use quotes around string values, not around numeric values, do not add a comma after the last property-value pair, place the closing bracket on a new line, without leading spaces, always end an object definition with a semicolon. For readibility, you should avoid using lines longer than 80 characters. For naming conventions, variables and functions names should be written as camelCase, global variables should be written in UPPERCASE, and constants (like PI) written in UPPERCASE. To load JavaScript in HTML you should use '<script src="myscript.js"></script>'. JavaScript files will have the file extention ".js". Lastly, use lowercase file names.
Some JavaScript best practices would include avoiding global variables, avoid "new", avoid "==", and avoid "eval()". Instead of global variables, you should use local variables. These variables should also be initialized. To declare objects and arrays, it's best to declare them with "const". Do not use "new String()", "new Number()", "new Boolean()", "new Object()", "new Array()", "new RegExp()", and "new Function()". All of these items can be initialized without the use of new. When adding an integer and string, the type conversion will mess things up sometimes. Lastly, finish your switch statements with defaults.
Some common JavaScript mistakes include accidently using the assingment operator (=) instead of the comparison operator (== or ===), expecting loose comparisons, confusing addition and concatenation, misunderstanding floats, breaking a JavaScript string, misplacing a semicolon, breaking a return statement, accessing arrays with named indexes, end definitions with commas, and confusing "undefined" and "null".
There are various ways to improve performance in JavaScript. You can reduce activity in loops, reduce DOM access, reduce DOM size, avoid unnecessary variables, delay JavaScript loading, and avoid using "with".
JavaScript has reserved words which you're not allowed to use for variables, labels, or functions names. They include abstract, arguments, await, boolean, break, byte, case, catch, char, class, const, continue, debugger, default, delete, do, double, else, enum, eval, export, extends, false, final, finally, float, for, function, goto, if, implements, import, in, instanceof, int, interface, let, long, native, new, null, package, private, protected, public, return, short, static, super, switch, synchronized, this, throw, throws, transient, true, try, typeof, var, void, volatile, while, with, yield, Array, Date, eval, function, hasOwnProperty, Infinity, isFinite, isNaN, isPrototypeOf, length, Math, NaN, name, Number, Object, prototype, String, toString, undefined, valueOf, getClass, java, JavaArray, javaClass, JavaObject, JavaPackage, alert, all, anchor, anchors, area, assign, blur, button, checkbox, clearInterval, clearTimeout, clientInformation, close, closed, confirm, constructor, crypto, decodeURI, decodeURIComponent, defaultStatus, document, element, elements, embed, embeds, encodeURI, encodeURIComponent, escape, event, fileUpload, focus, form, forms, frame, innerHeight, innerWidth, layer, layers, link, location, mimeTypes, navigate, navigator, frames, frameRate, hidden, history, image, images, offscreenBuffering, open, opener, option, outerHeight, outerWidth, packages, pageXOffset, pageYOffset, parent, parseFloat, parseInt, password, pkcs11, plugin, prompt, propertyIsEnum, radio, reset, screenX, screenY, scroll, secure, select, self, setInterval, setTimeout, status, submit, taint, text, textarea, top, unescape, untaint, window, onblur, onclick, onerror, onfocus, onkeydown, onkeypress, onkeyup, onmouseover, onload, onmouseup, onmousedown, onsubmit.